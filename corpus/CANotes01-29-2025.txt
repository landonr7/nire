CANotes 01-29-2025: 
Caches
1. Direct Mapping
2. Set Associative -- happy medium
3. Fully Associative

Cache Structure (2 Main Components)
- TAG array (addresses)
- Data array
    - 2D data structure with
        - n rows
        - m columns (bytes)
- 256 KB cache in 128 lines
    - Total = n * (bytes/n)
- Direct Mapping
    - 1 compare or way
    - CPU with PC
        - PC issues address out to memory system
        - Address is split into tag, line #, then offset
        - Offset: how many bytes across a line is the information
        - Line #: the index of the entry the information is in
        - Tag: leftover data
        - 16 column x 8 line cache
            - Offset is bits 0 - 3, Line # is bits 4 - 6, Tag is bits 
            7 - 24
            - DEADBEEF (in binary, E = 1110 and F = 1111)
                -  ...1 110 1111 -> ...1 is tag, 110 line 6, and 
                1111 is offset
            - Check if tag at correct offset and at correct line match then it is a hit
    - If bits 3 - 7 are the same for many addresses, then could run into thrashing
        - Thrashing: many addresses overwriting the same entry of a cache over and over

- Fully` Associative
    - n compares or way
    - Address is split into tag and offset
    - 1234
        - Offset is 4 and tag is 123
    - Address checks every entry for matching tag 

- Set Associative
    - n compares for n lines 
    - Address is split into tag, line # , and offset
        - Line # can vary (not always 3 - 7)
            - Move right 1 bit (3 - 6) -> 2 way
            - Move right 2 bits (3 - 5) -> 4 way
